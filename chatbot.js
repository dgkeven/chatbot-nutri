// Importa√ß√£o dos m√≥dulos necess√°rios
const express = require('express');
const qrcode = require('qrcode');
const { Client, LocalAuth } = require('whatsapp-web.js');
const fs = require('fs'); // M√≥dulo para interagir com o sistema de arquivos

// --- CONFIGURA√á√ÉO DO SERVIDOR EXPRESS ---
const app = express();
const PORT = process.env.PORT || 3000;
const SESSIONS_FILE = './sessions_nutricionista.json'; // Arquivo para persistir o estado das conversas

let qrCodeString = null;

// --- GERENCIAMENTO DE ESTADO (MEM√ìRIA DO BOT) ---
let conversas = {};
try {
    if (fs.existsSync(SESSIONS_FILE)) {
        const data = fs.readFileSync(SESSIONS_FILE, 'utf-8');
        conversas = JSON.parse(data);
        console.log('‚úÖ Sess√µes de conversa carregadas do arquivo.');
    }
} catch (error) {
    console.error('‚ö†Ô∏è Erro ao carregar o arquivo de sess√µes. Iniciando com mem√≥ria vazia.', error);
    conversas = {};
}

// --- FUN√á√ÉO DE SALVAMENTO S√çNCRONA (MAIS ROBUSTA) ---
function saveConversations() {
    try {
        fs.writeFileSync(SESSIONS_FILE, JSON.stringify(conversas, null, 2));
    } catch (err) {
        console.error('‚ùå Erro CR√çTICO ao salvar as sess√µes no arquivo:', err);
    }
}

// --- CONTROLE DE MENSAGENS DUPLICADAS ---
const processedMessages = new Set();
setInterval(() => {
    processedMessages.clear();
}, 60000); // Limpa o cache a cada 1 minuto

// --- ROTAS DO SERVIDOR EXPRESS ---
app.get('/', (req, res) => {
    res.send('Bot WhatsApp (Nutricionista) rodando!');
});

app.get('/qrcode', async (req, res) => {
    if (!qrCodeString) {
        return res.send('QR Code ainda n√£o gerado. Aguarde a inicializa√ß√£o do bot e atualize a p√°gina.');
    }
    try {
        const qrImage = await qrcode.toDataURL(qrCodeString);
        const html = `
            <html>
                <head>
                    <title>QR Code WhatsApp</title>
                    <style>
                        body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background-color: #f0f2f5; font-family: Arial, sans-serif; }
                        .container { text-align: center; padding: 40px; background-color: white; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
                        h2 { color: #333; }
                        img { margin-top: 20px; border: 1px solid #ddd; padding: 5px; border-radius: 8px; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h2>Escaneie o QR Code para autenticar</h2>
                        <img src="${qrImage}" alt="QR Code do WhatsApp" />
                    </div>
                </body>
            </html>
        `;
        res.send(html);
    } catch (err) {
        console.error('Erro ao gerar imagem do QR Code:', err);
        res.status(500).send('Erro ao gerar imagem do QR Code');
    }
});

app.listen(PORT, () => {
    console.log(`Servidor HTTP rodando na porta ${PORT}. Acesse /qrcode para ver o QR Code.`);
});


// --- CONFIGURA√á√ÉO DO CLIENTE WHATSAPP ---
const client = new Client({
    authStrategy: new LocalAuth({ clientId: 'nutricionista' }), // clientId para n√£o conflitar com outros bots
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage',
            '--disable-extensions', '--disable-gpu', '--disable-software-rasterizer',
            '--single-process'
        ],
    }
});

// --- EVENTOS DO CLIENTE WHATSAPP ---
client.on('qr', qr => {
    qrCodeString = qr;
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Bot Nutricionista est√° pronto e conectado! ‚úÖ');
});

// Evento para capturar mensagens ENVIADAS pela conta do bot (interven√ß√£o manual)
client.on('message_create', async msg => {
    if (!msg.fromMe) return;

    try {
        const chatId = msg.to;
        const texto = msg.body.trim().toLowerCase();
        if (chatId.includes('@g.us')) return;
        await handleOwnerMessage(chatId, texto);
    } catch (error) {
        console.error(`‚ùå Erro cr√≠tico em 'message_create' para ${msg.to}:`, error);
    }
});

// Evento para capturar mensagens RECEBIDAS de clientes
client.on('message', async msg => {
    try {
        const chatId = msg.from;
        const texto = msg.body.trim().toLowerCase();
        const msgId = msg.id._serialized;

        if (processedMessages.has(msgId)) return;
        if (chatId === 'status@broadcast' || msg.type !== 'chat') return;
        if (chatId.includes('@g.us')) return;

        processedMessages.add(msgId);
        await handleClientMessage(chatId, texto, msg);

    } catch (error) { // CORRE√á√ÉO: Adicionado chaves {} ao redor do console.error
        console.error(`‚ùå Erro cr√≠tico em 'message' para ${msg.from}:`, error);
    }
});

// --- L√ìGICA DE MANIPULA√á√ÉO DE MENSAGENS ---

async function handleOwnerMessage(chatId, texto) {
    let conversation = conversas[chatId];
    console.log(`[DONO/BOT] Mensagem para ${chatId}. Status atual: ${conversation?.status || 'Nenhum'}`);

    if (texto === 'automatico' || texto === 'encerrar') {
        if (conversation) {
            delete conversas[chatId];
            saveConversations();
            console.log(`[DONO/BOT] ü§ñ Atendimento autom√°tico REATIVADO para ${chatId}.`);
        }
        return;
    }

    if (conversation && conversation.status === 'automated') {
        conversation.status = 'manual';
        saveConversations();
        console.log(`[DONO/BOT] Interven√ß√£o! Status para ${chatId} agora √© MANUAL.`);
    } else if (!conversation) {
        conversas[chatId] = { status: 'manual' };
        saveConversations();
        console.log(`[DONO/BOT] Nova conversa iniciada. Status definido para MANUAL.`);
    }
}

async function handleClientMessage(chatId, texto, msg) {
    let conversation = conversas[chatId];
    console.log(`[CLIENTE] Mensagem de ${chatId}. Status da conversa: ${conversation?.status || 'Nenhum'}`);

    if (conversation && (conversation.status === 'manual' || conversation.status === 'processing')) {
        console.log(`[CLIENTE] Conversa em modo ${conversation.status}. Ignorando.`);
        return;
    }

    if (texto === 'cancelar') {
        delete conversas[chatId];
        saveConversations();
        await client.sendMessage(chatId, 'Atendimento cancelado. Se precisar de algo, estou √† disposi√ß√£o!');
        return;
    }

    if (!conversation) {
        try {
            conversas[chatId] = { status: 'processing' };
            console.log(`[CLIENTE] Nova conversa. Iniciando atendimento para ${chatId}.`);
            await client.sendMessage(chatId, `Ol√°! üëã Bem-vinda! Como posso te ajudar hoje?
    
1 - Agendar consulta nutricional  
2 - Saber mais sobre o Grupo Metamorfose  
3 - Tira d√∫vidas ou envio de exames 
    
‚ùå Envie "cancelar" a qualquer momento para encerrar o atendimento.`);

            conversas[chatId] = { status: 'automated', etapa: 1 };
            saveConversations();

        } catch (err) {
            console.error(`[CLIENTE] Erro ao iniciar nova conversa com ${chatId}.`, err);
            delete conversas[chatId];
            saveConversations();
        }
        return;
    }

    await processarFluxoConversa(chatId, texto, msg);
}

async function processarFluxoConversa(chatId, texto, msg) {
    let conversation = conversas[chatId];
    if (!conversation || conversation.status !== 'automated') return;

    try {
        switch (conversation.etapa) {
            case 1: // Processa a escolha do menu
                if (texto === '1') {
                    await enviarInfosAgendamento(chatId);
                    conversation.etapa = 2;
                } else if (texto === '2') {
                    await enviarInfosGrupo(chatId);
                    // Ap√≥s enviar as infos, o bot aguarda a resposta "tenho interesse"
                    conversation.etapa = 'aguardando_interesse_grupo';
                } else if (texto === '3') {
                    await client.sendMessage(chatId, `üë©‚Äç‚öïÔ∏è Voc√™ pode enviar suas d√∫vidas ou anexar seus exames diretamente nesta conversa. Assim que poss√≠vel, responderei.`);
                    // Coloca em modo manual para a nutricionista responder depois
                    conversation.status = 'manual';
                }
                break;

            case 'aguardando_interesse_grupo':
                if (texto === 'tenho interesse') {
                    await registrarInteresseGrupo(msg);
                    delete conversas[chatId]; // Finaliza o fluxo
                } else {
                    await client.sendMessage(chatId, `Entendido. Se mudar de ideia, basta enviar "tenho interesse". Se precisar de outra coisa, pode me chamar novamente.`);
                    delete conversas[chatId]; // Finaliza o fluxo
                }
                break;

            case 2: // Pergunta os objetivos ap√≥s receber a disponibilidade
                conversation.disponibilidade = msg.body;
                await client.sendMessage(chatId, `√ìtimo! Agora, por favor, informe seus principais objetivos com a consulta nutricional.
Voc√™ pode escolher mais de uma op√ß√£o, basta enviar os n√∫meros separados por v√≠rgula ou espa√ßo.

1 - Emagrecimento  
2 - Controle de taxas  
3 - Reeduca√ß√£o alimentar  
4 - Hipertrofia/defini√ß√£o  
5 - Gestante/tentante  
6 - Doen√ßas associadas (Diabetes, Gordura no f√≠gado, SOP, etc).`);
                conversation.etapa = 3;
                break;

            case 3: // Processa os objetivos e finaliza o agendamento
                const finalizado = await processarObjetivosEFinalizar(msg);
                if (finalizado) {
                    delete conversas[chatId];
                }
                break;
        }
        saveConversations();
    } catch (error) {
        console.error(`Erro no fluxo de conversa para ${chatId}:`, error);
        await client.sendMessage(chatId, "Ops! Ocorreu um erro. Vamos tentar novamente do in√≠cio.");
        delete conversas[chatId];
        saveConversations();
    }
}

// --- FUN√á√ïES AUXILIARES ---

async function enviarInfosAgendamento(chatId) {
    const texto = `Ol√°! Meu nome √© Priscilla Dalbem, sou nutricionista h√° 13 anos, especializada em Nutri√ß√£o Esportiva, Sa√∫de da Mulher, Fitoterapia e Gastronomia Aplicada √† Nutri√ß√£o.

Meu acompanhamento tem dura√ß√£o m√©dia de 50 minutos, onde realizo uma anamnese completa para entender sua rotina, prefer√™ncias e objetivos. Tamb√©m solicito exames de sangue para avaliar poss√≠veis car√™ncias nutricionais ou altera√ß√µes hormonais. Al√©m disso, fa√ßo uma avalia√ß√£o f√≠sica detalhada, incluindo peso, altura, bioimped√¢ncia, dobras cut√¢neas e circunfer√™ncias, para calcular seu percentual de gordura e massa muscular.
                    
Com base nesses dados, elaboro seu plano alimentar personalizado, que √© entregue em at√© 3 dias, juntamente com materiais complementares como receitas, lista de compras e checklist de automonitoramento. Ofere√ßo suporte via WhatsApp para d√∫vidas e dificuldades, e os retornos s√£o geralmente a cada 45 ou 60 dias, conforme necessidade.
                    
O valor da consulta √© R$ 280,00, sem direito a retorno.
                    
Caso tenha interesse, posso verificar um hor√°rio para voc√™. üòä
                    
Por favor, informe sua disponibilidade de dia e hor√°rio. Atendo de segunda a quinta-feira, das 08:00 √†s 11:00 e das 14:00 √†s 18:00.`;
    await client.sendMessage(chatId, texto);
}

async function enviarInfosGrupo(chatId) {
    const texto = `üå∏ *Grupo Metamorfose ‚Äì Sua transforma√ß√£o come√ßa agora!*

Voc√™, mulher que est√° cansada de dietas restritivas, da culpa ao comer e da press√£o para ter um corpo ‚Äúperfeito‚Äù‚Ä¶ chegou a hora de viver uma nova rela√ß√£o com a comida ‚Äì e com voc√™ mesma.
                
O *Metamorfose* √© um grupo online de emagrecimento com dura√ß√£o de 15 dias, criado especialmente para mulheres que desejam cuidar da sa√∫de, conquistar mais bem-estar e alcan√ßar o emagrecimento de forma leve, consciente e sem terrorismo nutricional.
                
Durante esses dias, eu, Priscilla, nutricionista esportiva com especializa√ß√£o em sa√∫de da mulher, estarei com voc√™ diariamente no WhatsApp, oferecendo:
                
‚Ä¢ Orienta√ß√µes pr√°ticas e acess√≠veis para uma alimenta√ß√£o equilibrada  
‚Ä¢ Dicas e reflex√µes para melhorar sua rela√ß√£o com a comida  
‚Ä¢ Suporte emocional e motivacional  
‚Ä¢ Est√≠mulo ao autocuidado e √† aceita√ß√£o do seu corpo em todas as fases  
                
‚ú® *N√£o √© sobre ‚Äúseguir dieta‚Äù, √© sobre se reconectar com seu corpo e com a sua ess√™ncia. √â sobre transformar de dentro para fora.*
                
üì£ *Vagas limitadas!* Me envie uma mensagem para garantir a sua participa√ß√£o no Grupo Metamorfose!`;
    await client.sendMessage(chatId, texto);
}

async function processarObjetivosEFinalizar(msg) {
    const texto = msg.body.trim().toLowerCase();
    const conversation = conversas[msg.from];

    const objetivosMap = { '1': 'Emagrecimento', '2': 'Controle de taxas', '3': 'Reeduca√ß√£o alimentar', '4': 'Hipertrofia/defini√ß√£o', '5': 'Gestante/tentante', '6': 'Doen√ßas associadas' };
    const escolhas = texto.replace(/,/g, ' ').split(/\s+/).filter(n => n && objetivosMap[n]);
    const objetivosSelecionados = escolhas.map(num => objetivosMap[num]);

    if (objetivosSelecionados.length > 0) {
        const objetivosTexto = objetivosSelecionados.join(', ');
        conversation.objetivo = objetivosTexto;
        console.log(`Novo pedido de agendamento:
        - Contato: ${msg.from}
        - Disponibilidade: ${conversation.disponibilidade}
        - Objetivos: ${conversation.objetivo}`);

        await client.sendMessage(msg.from, `Perfeito! Recebi sua disponibilidade e objetivo(s): *${objetivosTexto}*. Em breve entrarei em contato para confirmarmos um hor√°rio. At√© logo! üòä`);
        return true;
    } else {
        await client.sendMessage(msg.from, "N√£o entendi sua sele√ß√£o de objetivos. Por favor, envie apenas os n√∫meros correspondentes.");
        return false;
    }
}

async function registrarInteresseGrupo(msg) {
    const chatId = msg.from;
    const contato = await msg.getContact();
    const nome = contato.pushname || contato.name || 'Desconhecido';

    // Para persist√™ncia, podemos salvar isso dentro do objeto 'conversas'
    if (!conversas.interessadosGrupo) {
        conversas.interessadosGrupo = [];
    }
    if (!conversas.interessadosGrupo.some(i => i.numero === chatId)) {
        conversas.interessadosGrupo.push({ nome, numero: chatId });
        console.log("Novo interessado no grupo:", { nome, numero: chatId });
    }

    await client.sendMessage(chatId, `ü•∞ Que √≥timo, ${nome}! Seu interesse foi registrado. Assim que a pr√≥xima turma do Grupo Metamorfose for aberta, eu avisarei voc√™ por aqui. At√© breve! üíï`);
}

// --- INICIALIZA√á√ÉO DO BOT ---
client.initialize().catch(err => {
    console.error("Erro na inicializa√ß√£o do cliente:", err);
});